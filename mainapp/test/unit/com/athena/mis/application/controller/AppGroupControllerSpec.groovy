package com.athena.mis.application.controller

import com.athena.mis.BaseService
import com.athena.mis.application.actions.appgroup.CreateAppGroupActionService
import com.athena.mis.application.actions.appgroup.ListAppGroupActionService
import com.athena.mis.application.actions.appgroup.UpdateAppGroupActionService
import com.athena.mis.application.entity.AppGroup
import com.athena.mis.application.entity.AppUser
import com.athena.mis.application.service.AppGroupService
import com.athena.mis.application.session.AppSessionService
import grails.test.mixin.Mock
import grails.test.mixin.TestFor
import spock.lang.Specification

/**
 * Created by Asif on 12/2/2015.
 */

@TestFor(AppGroupController)
@Mock([
        AppGroup,
        AppGroupService,
        CreateAppGroupActionService,
        ListAppGroupActionService,
        UpdateAppGroupActionService,
        BaseService,
        AppSessionService
])

class AppGroupControllerSpec extends Specification{

    void setup () {
        AppUser appUser = new AppUser()
        appUser.id = 1

        controller.createAppGroupActionService.appSessionService.setAppUser(appUser)
        controller.listAppGroupActionService.appSessionService.setAppUser(appUser)
        controller.updateAppGroupActionService.appSessionService.setAppUser(appUser)
        //controller.deleteAppGroupActionService.appSessionService.setAppUser(appUser)
    }

    def 'Test Show Action' () {
        setup:
        controller.params.oId = "ATHENA_ID"

        when:
        request.method = "POST"
        controller.show()

        then:
        model.oId == "ATHENA_ID"
        view == "/application/appGroup/show"
    }
/*
    long id              // primary key (Auto generated by its own sequence)
    long version         // entity version in the persistence layer
    String name          // Unique name within a company
    long createdBy       // AppUser.id
    Date createdOn       // Object creation DateTime
    long updatedBy       // AppUser.id
    Date updatedOn       // Object updated DateTime
    long companyId       // Company.id
*/
    def 'Test Create Action' () {

        setup:
        controller.params.id = "1"
        controller.params.version = "0"
        controller.params.name = "Test Bank"
        controller.params.companyId = "1"
        controller.params.createdBy = "1"
        controller.params.createdOn = new Date()
        controller.params.updatedBy = "1"
        controller.params.updatedOn = new Date()

        when:
        request.method = 'POST'
        controller.create()

        then:
        response.redirectedUrl == null
        response.json.message == "Group has been successfully saved"
        response.json.isError == false
    }

    def 'Test Update Action' () {

        setup:
        AppGroup appGroup = new AppGroup(
                id : 1,
                version : 0,
                name : "Test Bank",
                companyId : 1,
                createdBy : 1,
                createdOn : new Date(),
                updatedBy : 1,
                updatedOn : new Date()
        )
        appGroup.id = 100
        appGroup.save(flush: true, failOnError: true, validate: false)

        controller.params.id = "100"
        controller.params.version = "0"
        controller.params.name = "Test Bank"
        controller.params.companyId = "1"
        controller.params.createdBy = "1"
        controller.params.createdOn = new Date()
        controller.params.updatedBy = "1"
        controller.params.updatedOn = new Date()

        when:
        request.method = 'POST'
        controller.update()

        then:
        response.redirectUrl == null
        response.json.message == "Group has been updated successfully"
        response.json.isError == false
    }

    def 'Test List Action' () {
        setup:
        AppGroup appGroup = new AppGroup(
                id : 1,
                version : 0,
                name : "Test Bank",
                companyId : 1,
                createdBy : 1,
                createdOn : new Date(),
                updatedBy : 1,
                updatedOn : new Date()
        )

        appGroup.save(flush: true, failOnError: true, validate: false)

        controller.params.page = 1
        controller.params.pageSize = 10
        controller.params."sort[0]['dir']" = 'asc'
        controller.params."sort[0]['field']" = 'name'
        controller.params.take = 10
        controller.params.skip = 0

        when:
        request.method = 'POST'
        controller.list()

        then:
        response.json.isError == false
        response.json.count >= 0
    }
}
