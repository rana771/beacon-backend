package com.athena.mis.application.controller

import com.athena.mis.BaseService
import com.athena.mis.application.actions.appshellscript.CreateAppShellScriptActionService
import com.athena.mis.application.actions.appshellscript.DeleteAppShellScriptActionService
import com.athena.mis.application.actions.appshellscript.EvaluateAppShellScriptActionService
import com.athena.mis.application.actions.appshellscript.EvaluateAppSqlScriptActionService
import com.athena.mis.application.actions.appshellscript.ListAppShellScriptActionService
import com.athena.mis.application.actions.appshellscript.ShowAppShellScriptActionService
import com.athena.mis.application.actions.appshellscript.ShowAppSqlScriptActionService
import com.athena.mis.application.actions.appshellscript.UpdateAppShellScriptActionService
import com.athena.mis.application.actions.report.appShellScript.DownloadAppShellScriptReportActionService
import com.athena.mis.application.entity.AppShellScript
import com.athena.mis.application.entity.AppUser
import com.athena.mis.application.model.ListAppShellScriptActionServiceModel
import com.athena.mis.application.service.AppShellScriptService
import com.athena.mis.application.service.ListAppShellScriptActionServiceModelService
import com.athena.mis.application.session.AppSessionService
import grails.test.mixin.Mock
import grails.test.mixin.TestFor
import spock.lang.Specification

/**
 * Created by Asif on 12/23/2015.
 */

@TestFor(AppShellScriptController)

@Mock([
        AppShellScript,
        AppShellScriptService,
        ListAppShellScriptActionServiceModelService,
        ListAppShellScriptActionServiceModel,
        ShowAppShellScriptActionService,
        ShowAppSqlScriptActionService,
        CreateAppShellScriptActionService,
        ListAppShellScriptActionService,
        DeleteAppShellScriptActionService,
        UpdateAppShellScriptActionService,
        EvaluateAppShellScriptActionService,
        EvaluateAppSqlScriptActionService,
        DownloadAppShellScriptReportActionService,
        BaseService,
        AppSessionService
])

class AppShellScriptControllerSpec extends Specification{

    void setup () {
        AppUser appUser = new AppUser()
        appUser.id = 1

        controller.showAppShellScriptActionService.appSessionService.setAppUser(appUser)
        controller.showAppSqlScriptActionService.appSessionService.setAppUser(appUser)
        controller.createAppShellScriptActionService.appSessionService.setAppUser(appUser)
        controller.listAppShellScriptActionService.appSessionService.setAppUser(appUser)
        controller.deleteAppShellScriptActionService.appSessionService.setAppUser(appUser)
        controller.updateAppShellScriptActionService.appSessionService.setAppUser(appUser)
        controller.evaluateAppShellScriptActionService.appSessionService.setAppUser(appUser)
        controller.evaluateAppSqlScriptActionService.appSessionService.setAppUser(appUser)
        controller.downloadAppShellScriptReportActionService.appSessionService.setAppUser(appUser)
    }

    def 'Show AppShellScript' (){

        when:
        request.method = "POST"
        controller.show()

        then:
        view == '/application/appShellScript/show'
    }

    def 'Create AppShellScript' () {

        setup:

        controller.params.id = 1                    // primary key (Auto generated by its own sequence)
        controller.params.version = "0"               // entity version in the persistence layer
        controller.params.name = "Backup Script"                // Name of AppShellScript (unique)
        controller.params.script = "hostname"              // script of AppShellScript
        controller.params.serverInstanceId = 1      // if script type shell AppServerInstance.id, if script type sql AppDbInstance.id
        controller.params.scriptTypeId = 1000000055          // SystemEntity.id (Sell, SQL)
        controller.params.companyId = 1             // Company.id
        controller.params.pluginId  = 1              // id of plugin (e.g. 1 for Application, 13 for Document etc.)
        controller.params.createdOn = new Date()             // Object creation DateTime
        controller.params.createdBy = 1             // AppUser.id
        controller.params.numberOfExecution = 1       // count of execution
        controller.params.updatedBy = 1             // AppUser.id
        controller.params.isReserved = true         // reserved script flag

        when:
        request.method = 'POST'
        controller.create()

        then:
        response.redirectedUrl == null
        response.json.message == "Script has been successfully saved"
        response.json.isError == false
    }

    def 'Update AppShellScript'(){

        setup:

        AppShellScript appShellScript = new AppShellScript(
                version : 0,               // entity version in the persistence layer
                name : "Backup Script",                // Name of AppShellScript (unique)
                script : "hostname",              // script of AppShellScript
                serverInstanceId : 1,      // if script type shell AppServerInstance.id, if script type sql AppDbInstance.id
                scriptTypeId : 1000000055,          // SystemEntity.id (Sell, SQL)
                companyId : 1,             // Company.id
                pluginId  : 1,              // id of plugin (e.g. 1 for Application, 13 for Document etc.)
                createdOn : new Date(),             // Object creation DateTime
                createdBy : 1,             // AppUser.id
                numberOfExecution : 1,       // count of execution
                updatedBy : 1,             // AppUser.id
                isReserved : true
        )
        appShellScript.id = 1
        appShellScript.save(flush: true, failOnError: true, validate: false)

        controller.params.id = 1                    // primary key (Auto generated by its own sequence)
        controller.params.version = "0"               // entity version in the persistence layer
        controller.params.name = "Backup Script"                // Name of AppShellScript (unique)
        controller.params.script = "hostname"              // script of AppShellScript
        controller.params.serverInstanceId = 1      // if script type shell AppServerInstance.id, if script type sql AppDbInstance.id
        controller.params.scriptTypeId = 1000000055          // SystemEntity.id (Sell, SQL)
        controller.params.companyId = 1             // Company.id
        controller.params.pluginId  = 1              // id of plugin (e.g. 1 for Application, 13 for Document etc.)
        controller.params.createdOn = new Date()             // Object creation DateTime
        controller.params.createdBy = 1             // AppUser.id
        controller.params.numberOfExecution = 1       // count of execution
        controller.params.updatedBy = 1             // AppUser.id
        controller.params.isReserved = true

        when:
        request.method = 'POST'
        controller.update()

        then:
        response.redirectUrl == null
        response.json.message == "Script has been successfully updated"
        response.json.isError == false
    }

    def 'List AppShellScript' () {
        setup:

        AppShellScript appShellScript = new AppShellScript(
                version : 0,               // entity version in the persistence layer
                name : "Backup Script",                // Name of AppShellScript (unique)
                script : "hostname",              // script of AppShellScript
                serverInstanceId : 1,      // if script type shell AppServerInstance.id, if script type sql AppDbInstance.id
                scriptTypeId : 1000000055,          // SystemEntity.id (Sell, SQL)
                companyId : 1,             // Company.id
                pluginId  : 1,              // id of plugin (e.g. 1 for Application, 13 for Document etc.)
                createdOn : new Date(),             // Object creation DateTime
                createdBy : 1,             // AppUser.id
                numberOfExecution : 1,       // count of execution
                updatedBy : 1,             // AppUser.id
                isReserved : true
        )
        appShellScript.id = 1
        appShellScript.save(flush: true, failOnError: true, validate: false)

        controller.params.page = 1
        controller.params.pageSize = 10
        controller.params."sort[0]['dir']" = 'asc'
        controller.params."sort[0]['field']" = 'name'
        controller.params.take = 10
        controller.params.skip = 0
        controller.params.pluginId = appShellScript.pluginId
        controller.params.scriptTypeId = appShellScript.scriptTypeId

        when:
        request.method = 'POST'
        controller.list()

        then:
        response.json.isError == false
        response.json.count >= 0
    }
}
