package com.athena.mis.application.controller

import com.athena.mis.BaseService
import com.athena.mis.application.actions.userrole.CreateUserRoleActionService
import com.athena.mis.application.actions.userrole.CreateUserRoleForCompanyUserActionService
import com.athena.mis.application.actions.userrole.DeleteUserRoleActionService
import com.athena.mis.application.actions.userrole.ListUserRoleActionService
import com.athena.mis.application.actions.userrole.ListUserRoleForCompanyUserActionService
import com.athena.mis.application.actions.userrole.ShowUserRoleActionService
import com.athena.mis.application.actions.userrole.ShowUserRoleForCompanyUserActionService
import com.athena.mis.application.actions.userrole.UpdateUserRoleActionService
import com.athena.mis.application.actions.userrole.UpdateUserRoleForCompanyUserActionService
import com.athena.mis.application.entity.AppUser
import com.athena.mis.application.entity.Role
import com.athena.mis.application.entity.UserRole
import com.athena.mis.application.model.ListUserRoleActionServiceModel
import com.athena.mis.application.model.ListUserRoleForCompanyUserActionServiceModel
import com.athena.mis.application.service.AppUserService
import com.athena.mis.application.service.AppVersionService
import com.athena.mis.application.service.ListUserRoleActionServiceModelService
import com.athena.mis.application.service.ListUserRoleForCompanyUserActionServiceModelService
import com.athena.mis.application.service.RoleService
import com.athena.mis.application.service.TestDataModelService
import com.athena.mis.application.service.UserRoleService
import com.athena.mis.application.session.AppSessionService
import grails.plugin.springsecurity.SpringSecurityService
import grails.test.mixin.Mock
import grails.test.mixin.TestFor
import spock.lang.Specification

/**
 * Created by Asif on 12/17/2015.
 */

@TestFor(UserRoleController)

@Mock([
        Role,
        UserRole,
        RoleService,
        AppUser,
        AppUserService,
        UserRoleService,
        CreateUserRoleActionService,
        UpdateUserRoleActionService,
        ListUserRoleActionService,
        ListUserRoleActionServiceModelService,
        ListUserRoleActionServiceModel,
        TestDataModelService,
        SpringSecurityService,
        AppVersionService,
        ShowUserRoleActionService,
        DeleteUserRoleActionService,
        ShowUserRoleForCompanyUserActionService,
        ListUserRoleForCompanyUserActionService,
        CreateUserRoleForCompanyUserActionService,
        UpdateUserRoleForCompanyUserActionService,
        ListUserRoleForCompanyUserActionServiceModelService,
        ListUserRoleForCompanyUserActionServiceModel,
        BaseService,
        AppSessionService
])

class UserRoleControllerSpec extends Specification{

        void setup() {
            AppUser appUser = new AppUser()
            appUser.id = 1

            controller.createUserRoleActionService.appSessionService.setAppUser(appUser)
            controller.updateUserRoleActionService.appSessionService.setAppUser(appUser)
            controller.deleteUserRoleActionService.appSessionService.setAppUser(appUser)
            controller.listUserRoleActionService.appSessionService.setAppUser(appUser)
        }

        def 'Show UserRole' (){

                when:
                request.method = "POST"
                controller.show()

                then:
                view == '/application/userRole/show'
        }

    def 'Show ForCompanyUser' (){

        setup:

        AppUser appUser = new AppUser (
                id : 1,                                  // primary key (Auto generated by its own sequence)
                version : 0,                             // entity version in the persistence layer
                loginId : "info@athena.com.bd",          // user login name (unique within a company)
                username : "Md. Masudul Islam",          // user name of AppUser
                password : "athena@123",                 // password of AppUser
                enabled : true,                          // flag to enable AppUser
                hasSignature : false,                    // flag to determine if user has any signature image
                companyId : 1,                           // Company.id
                accountExpired : false,                  // flag to determine is account expired or not
                accountLocked : false,                   // flag to determine is account locked or not
                passwordExpired : false,                 // flag to determine is user password expired or not
                isCompanyUser : true,                    // flag to determine if AppUser is company user or not
                nextExpireDate : "01/01/2016",
                employeeId : 1,
                isActivatedByMail : false,
                isPowerUser : true,                      // if true then Admin user
                isConfigManager : true,                  // if true then development user
                isSystemUser : false,                    // if true then system user (allowed to do system manipulation like write and execute AppShellScript)
                isDisablePasswordExpiration : false,     // if true then AppUser password will not expire
                createdBy : 1,                           // AppUser.id
                createdOn :  new Date(),                 // Object creation DateTime
                updatedBy : 1,                           // AppUser.id
                updatedOn : new Date(),                  // Object Updated DateTime
                isReseller : false
        )

        appUser.id = 1
        appUser.save(flush: true, failOnError: true, validate: false)

        controller.params.userId = appUser.id

        when:
        request.method = "POST"
        controller.showForCompanyUser()

        then:
        view == '/application/userRole/showForCompanyUser'
    }

        def 'Create UserRole' (){

                setup:

//             Creating App User
               AppUser appUser = new AppUser (

                       version : 0,                             // entity version in the persistence layer
                       loginId : "info@athena.com.bd",          // user login name (unique within a company)
                       username : "Md. Masudul Islam",          // user name of AppUser
                       password : "athena@123",                 // password of AppUser
                       enabled : true,                          // flag to enable AppUser
                       hasSignature : false,                    // flag to determine if user has any signature image
                       companyId : 1,                           // Company.id
                       accountExpired : false,                  // flag to determine is account expired or not
                       accountLocked : false,                   // flag to determine is account locked or not
                       passwordExpired : false,                 // flag to determine is user password expired or not
                       isCompanyUser : true,                    // flag to determine if AppUser is company user or not
                       nextExpireDate : "01/01/2016",
                       employeeId : 1,
                       isActivatedByMail : false,
                       isPowerUser : true,                      // if true then Admin user
                       isConfigManager : true,                  // if true then development user
                       isSystemUser : false,                    // if true then system user (allowed to do system manipulation like write and execute AppShellScript)
                       isDisablePasswordExpiration : false,     // if true then AppUser password will not expire
                       createdBy : 1,                           // AppUser.id
                       createdOn :  new Date(),                 // Object creation DateTime
                       updatedBy : 1,                           // AppUser.id
                       updatedOn : new Date(),                  // Object Updated DateTime
                       isReseller : false
               )
                appUser.id = 3
                appUser.save(flush: true, failOnError: true, validate: false)


//              Creating Role
                Role role = new Role(

                        version : 0,                // entity version in the persistence layer
                        authority : "ROLE_-1_1",    // Role authority (ROLE_Role.id_Company.id) e.g ROLE_-1_1, ROLE_5_101
                        name : "Test Role",         // Unique name within a company
                        companyId : 1,              // Company.id
                        roleTypeId : 0,             // ReservedRole.id (For any custom created role, RoleTypeId = 0)
                        createdBy : 1,              // AppUser.id
                        createdOn : new Date(),     // Object creation DateTime
                        updatedBy : 1,              // AppUser.id
                        updatedOn : new Date(),     // Object Updated DateTime
                        pluginId : 1,               // Application = 1, Accounting = 2 etc. (For any custom created role, pluginId = 0)
                        isReseller : false
                )
                role.id = 1
                role.save(flush: true, failOnError: true, validate: false)

                UserRole userRole = new UserRole(
                        user: appUser,
                        role: role
                )

                controller.params.put("userRole", userRole)

                controller.params.userId = appUser.id
                controller.params.roleId = role.id

                when:
                request.method = 'POST'
                controller.create()

                then:
                response.redirectedUrl == null
                response.json.message == "User role mapping has been successfully saved"
                response.json.isError == false
        }

    def 'Create ForCompanyUser' () {
        setup:


//             Creating App User
        AppUser appUser = new AppUser (

                version : 0,                             // entity version in the persistence layer
                loginId : "info@athena.com.bd",          // user login name (unique within a company)
                username : "Md. Masudul Islam",          // user name of AppUser
                password : "athena@123",                 // password of AppUser
                enabled : true,                          // flag to enable AppUser
                hasSignature : false,                    // flag to determine if user has any signature image
                companyId : 1,                           // Company.id
                accountExpired : false,                  // flag to determine is account expired or not
                accountLocked : false,                   // flag to determine is account locked or not
                passwordExpired : false,                 // flag to determine is user password expired or not
                isCompanyUser : true,                    // flag to determine if AppUser is company user or not
                nextExpireDate : "01/01/2016",
                employeeId : 1,
                isActivatedByMail : false,
                isPowerUser : true,                      // if true then Admin user
                isConfigManager : true,                  // if true then development user
                isSystemUser : false,                    // if true then system user (allowed to do system manipulation like write and execute AppShellScript)
                isDisablePasswordExpiration : false,     // if true then AppUser password will not expire
                createdBy : 1,                           // AppUser.id
                createdOn :  new Date(),                 // Object creation DateTime
                updatedBy : 1,                           // AppUser.id
                updatedOn : new Date(),                  // Object Updated DateTime
                isReseller : false
        )
        appUser.id = 3
        appUser.save(flush: true, failOnError: true, validate: false)


//              Creating Role
        Role role = new Role(

                version : 0,                // entity version in the persistence layer
                authority : "ROLE_-1_1",    // Role authority (ROLE_Role.id_Company.id) e.g ROLE_-1_1, ROLE_5_101
                name : "Test Role",         // Unique name within a company
                companyId : 1,              // Company.id
                roleTypeId : 0,             // ReservedRole.id (For any custom created role, RoleTypeId = 0)
                createdBy : 1,              // AppUser.id
                createdOn : new Date(),     // Object creation DateTime
                updatedBy : 1,              // AppUser.id
                updatedOn : new Date(),     // Object Updated DateTime
                pluginId : 1,               // Application = 1, Accounting = 2 etc. (For any custom created role, pluginId = 0)
                isReseller : false
        )
        role.id = 1
        role.save(flush: true, failOnError: true, validate: false)

        controller.params.userId = appUser.id
        controller.params.roleId = role.id

        when:
        request.method = 'POST'
        controller.createForCompanyUser()

        then:
        response.redirectedUrl == null
        response.json.message == "User role mapping has been successfully saved"
        response.json.isError == false
    }

        def 'Update UserRole'() {
            setup:

//             Creating App User
            AppUser appUser = new AppUser (

                    version : 0,                             // entity version in the persistence layer
                    loginId : "info@athena.com.bd",          // user login name (unique within a company)
                    username : "Md. Masudul Islam",          // user name of AppUser
                    password : "athena@123",                 // password of AppUser
                    enabled : true,                          // flag to enable AppUser
                    hasSignature : false,                    // flag to determine if user has any signature image
                    companyId : 1,                           // Company.id
                    accountExpired : false,                  // flag to determine is account expired or not
                    accountLocked : false,                   // flag to determine is account locked or not
                    passwordExpired : false,                 // flag to determine is user password expired or not
                    isCompanyUser : true,                    // flag to determine if AppUser is company user or not
                    nextExpireDate : "01/01/2016",
                    employeeId : 1,
                    isActivatedByMail : false,
                    isPowerUser : true,                      // if true then Admin user
                    isConfigManager : true,                  // if true then development user
                    isSystemUser : false,                    // if true then system user (allowed to do system manipulation like write and execute AppShellScript)
                    isDisablePasswordExpiration : false,     // if true then AppUser password will not expire
                    createdBy : 1,                           // AppUser.id
                    createdOn :  new Date(),                 // Object creation DateTime
                    updatedBy : 1,                           // AppUser.id
                    updatedOn : new Date(),                  // Object Updated DateTime
                    isReseller : false
            )

            appUser.id = 3
            appUser.save(flush: true, failOnError: true, validate: false)

//              Creating Role
            Role role = new Role(
                    id : 1,                     // primary key (Auto generated by its own sequence)
                    version : 0,                // entity version in the persistence layer
                    authority : "ROLE_-1_1",    // Role authority (ROLE_Role.id_Company.id) e.g ROLE_-1_1, ROLE_5_101
                    name : "Test Role",         // Unique name within a company
                    companyId : 1,              // Company.id
                    roleTypeId : 0,             // ReservedRole.id (For any custom created role, RoleTypeId = 0)
                    createdBy : 1,              // AppUser.id
                    createdOn : new Date(),     // Object creation DateTime
                    updatedBy : 1,              // AppUser.id
                    updatedOn : new Date(),     // Object Updated DateTime
                    pluginId : 1,               // Application = 1, Accounting = 2 etc. (For any custom created role, pluginId = 0)
                    isReseller : false
            )

            role.id = 1
            role.save(flush: true, failOnError: true, validate: false)

            UserRole userRole = new UserRole(userId: appUser.id, roleId: role.id)
            userRole.save(flush: true, failOnError: true, validate: false)
            controller.params.put("userRole", userRole)

            controller.params.existingUserId = appUser.id
            controller.params.roleId = role.id
            controller.params.userId = userRole.userId

            when:
            request.method = 'POST'
            controller.update()

            then:
            response.redirectUrl == null
            response.json.message == "user-role has been successfully updated"
            response.json.isError == false
        }

    def 'Update ForCompanyUser' (){

        setup:

//        Creating App User
        AppUser appUser = new AppUser (

                version : 0,                             // entity version in the persistence layer
                loginId : "info@athena.com.bd",          // user login name (unique within a company)
                username : "Md. Masudul Islam",          // user name of AppUser
                password : "athena@123",                 // password of AppUser
                enabled : true,                          // flag to enable AppUser
                hasSignature : false,                    // flag to determine if user has any signature image
                companyId : 1,                           // Company.id
                accountExpired : false,                  // flag to determine is account expired or not
                accountLocked : false,                   // flag to determine is account locked or not
                passwordExpired : false,                 // flag to determine is user password expired or not
                isCompanyUser : true,                    // flag to determine if AppUser is company user or not
                nextExpireDate : "01/01/2016",
                employeeId : 1,
                isActivatedByMail : false,
                isPowerUser : true,                      // if true then Admin user
                isConfigManager : true,                  // if true then development user
                isSystemUser : false,                    // if true then system user (allowed to do system manipulation like write and execute AppShellScript)
                isDisablePasswordExpiration : false,     // if true then AppUser password will not expire
                createdBy : 1,                           // AppUser.id
                createdOn :  new Date(),                 // Object creation DateTime
                updatedBy : 1,                           // AppUser.id
                updatedOn : new Date(),                  // Object Updated DateTime
                isReseller : false
        )

        appUser.id = 3
        appUser.save(flush: true, failOnError: true, validate: false)

//              Creating Role
        Role role = new Role(
                id : 1,                     // primary key (Auto generated by its own sequence)
                version : 0,                // entity version in the persistence layer
                authority : "ROLE_-1_1",    // Role authority (ROLE_Role.id_Company.id) e.g ROLE_-1_1, ROLE_5_101
                name : "Test Role",         // Unique name within a company
                companyId : 1,              // Company.id
                roleTypeId : 0,             // ReservedRole.id (For any custom created role, RoleTypeId = 0)
                createdBy : 1,              // AppUser.id
                createdOn : new Date(),     // Object creation DateTime
                updatedBy : 1,              // AppUser.id
                updatedOn : new Date(),     // Object Updated DateTime
                pluginId : 1,               // Application = 1, Accounting = 2 etc. (For any custom created role, pluginId = 0)
                isReseller : false
        )

        role.id = 1
        role.save(flush: true, failOnError: true, validate: false)

        UserRole userRole = new UserRole(userId: appUser.id, roleId: role.id)
        userRole.save(flush: true, failOnError: true, validate: false)

        controller.params.existingRoleId = role.id
        controller.params.userId = appUser.id
        controller.params.roleId = role.id

        when:
        request.method = 'POST'
        controller.updateForCompanyUser()

        then:
        response.redirectUrl == null
        response.json.message == "user-role has been successfully updated"
        response.json.isError == false
    }

        def 'List UserRole'(){
            setup:

            controller.params.roleId = 1
            controller.params.page = 1
            controller.params.pageSize = 10
            controller.params."sort[0]['dir']" = 'asc'
            controller.params."sort[0]['field']" = 'username'
            controller.params.take = 10
            controller.params.skip = 0

            when:
            request.method = 'POST'
            controller.list()

            then:
            response.json.isError == false
            response.json.count >= 0
        }

    def 'List ForCompanyUser' (){
        setup:

        controller.params.userId = 1
        controller.params.page = 1
        controller.params.pageSize = 10
        controller.params."sort[0]['dir']" = 'asc'
        controller.params."sort[0]['field']" = 'username'
        controller.params.take = 10
        controller.params.skip = 0

        when:
        request.method = 'POST'
        controller.listForCompanyUser()

        then:
        response.json.isError == false
        response.json.count >= 0
    }

 }
