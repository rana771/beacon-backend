package com.athena.mis.application.entity

/**
 * <p>
 * <strong>Module:</strong> Application </br>
 * <strong>Purpose:</strong> AppShellScript contains script to evaluate.
 * AppShellScript has association with few other domains as listed below.
 * </p>
 *
 * <p><strong>Local Reference:</strong> Has-a relationship with other domains:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.AppServerInstance#id as serverInstanceId}</li>
 *     <li>{@link com.athena.mis.application.entity.SystemEntity#id as scriptTypeId}</li>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as createdBy}</li>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as updatedBy}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#id as companyId}</li>
 * </ul>
 *
 */
class AppShellScript {

    public static final String BACKUP_SCRIPT = "Backup Script"
    public static final String MAINTENANCE_SCRIPT = "Maintenance Script"
    public static final String BACKUP_SQL = "Backup SQL"
    public static final String MAINTENANCE_SQL = "Maintenance SQL"

    long id                     // primary key (Auto generated by its own sequence)
    long version                // entity version in the persistence layer
    String name                 // Name of AppShellScript (unique)
    String script               // script of AppShellScript
    long serverInstanceId       // if script type shell AppServerInstance.id, if script type sql AppDbInstance.id
    long scriptTypeId           // SystemEntity.id (Sell, SQL)
    long companyId              // Company.id
    int pluginId                // id of plugin (e.g. 1 for Application, 13 for Document etc.)
    Date createdOn              // Object creation DateTime
    long createdBy              // AppUser.id
    Date updatedOn              // Object updated DateTime
    Date lastExecutedOn         // Script or sql executed DateTime
    int numberOfExecution       // count of execution
    long updatedBy              // AppUser.id
    boolean isReserved          // reserved script flag

    static constraints = {
        name(nullable: false)
        script(nullable: false, maxSize: 1500)
        companyId(nullable: false)
        scriptTypeId(nullable: false)
        pluginId(nullable: false)
        createdOn(nullable: false)
        createdBy(nullable: false)
        updatedOn(nullable: true)
        lastExecutedOn(nullable: true)
        numberOfExecution(nullable: false)
        updatedBy(nullable: false)
    }

    static mapping = {
        id generator: 'sequence', params: [sequence: 'app_shell_script_id_seq']
        serverInstanceId index: 'app_shell_script_server_instance_id_idx'
        companyId index: 'app_shell_script_company_id_idx'
        scriptTypeId index: 'app_shell_script_script_type_id_idx'
        pluginId index: 'app_shell_script_plugin_id_idx'

        // unique index on "name" and "script_type_id" using AppShellScriptService.createDefaultSchema()
        // <domain_name><property_name_1><property_name_2>idx
    }

    public String getScript() {
        return script.length() > 1500 ? script.substring(0, 1499) : script
    }
}
