package com.athena.mis.application.entity

/**
 * <p>
 * <strong>Module:</strong> Application </br>
 * <strong>Purpose:</strong> Contains note of different entity (Customer, PtTask etc).
 * AppNote has association with few other domains as listed below.
 * </p>
 *
 * <p><strong>Local Reference:</strong> Has-a relationship with other domains:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as createdBy}</li>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as updatedBy}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#id as companyId}</li>
 *     <li>{@link com.athena.mis.application.entity.SystemEntity#id as entityTypeId}</li>
 *     <li>{@link com.athena.mis.application.entity.SystemEntity#id as entityNoteTypeId}</li>
 *     <li>{@link com.athena.mis.exchangehouse.entity.ExhCustomer#id as entityId}</li>
 *     <li>{@link com.athena.mis.projecttrack.entity.PtTask#id as entityId}</li>
 * </ul>
 *
 */
class AppNote {

    public static final String DEFAULT_SORT_FIELD = "id"

    long id                     // primary key (Auto generated by its own sequence)
    long version                // entity version in the persistence layer
    long entityTypeId           // SystemEntity.id (Customers, Task)
    long entityId               // customers.id, task.id etc
    long entityNoteTypeId       // SystemEntity.id
    String note                 // comment body
    long createdBy              // AppUser.id
    Date createdOn              // Object creation DateTime
    long updatedBy              // AppUser.id
    Date updatedOn              // Object updated DateTime
    long companyId              // Company.id
    int pluginId                // plugin id e.g : 1 for Application, 9 for Exchange House etc.

    static constraints = {
        entityNoteTypeId(nullable: false)
        entityTypeId(nullable: false)
        entityId(nullable: false)
        note(nullable: false, blank: false, maxSize: 5000)
        createdBy(nullable: false)
        createdOn(nullable: false)
        updatedOn(nullable: true)
        updatedBy(nullable: false)
        companyId(nullable: false)
        pluginId(nullable: false)
    }

    static mapping = {
        id generator: 'sequence', params: [sequence: 'app_note_id_seq']

        entityTypeId index: 'app_note_entity_type_id_idx'
        entityId index: 'app_note_entity_id_idx'
        pluginId index: 'app_note_plugin_id_idx'
        createdBy index: 'app_note_created_by_idx'
        companyId index: 'app_note_company_id_idx'
        updatedBy index: 'app_note_updated_by_idx'
    }

    public String getNote() {
        return note.length() > 5000 ? note.substring(0, 4999) : note
    }
}

