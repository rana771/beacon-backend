package com.athena.mis.application.entity

/**
 * <p>
 * <strong>Module:</strong> Application </br>
 * <strong>Purpose:</strong> Used as an entity to mapped with user.
 * AppGroup has association with few other domains as listed below.
 * </p>
 *
 * <p><strong>Foreign Reference:</strong> Other domain, which has foreign key reference of Project:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.AppUserEntity#entityId}</li>
 * </ul>
 *
 * <p><strong>Local Reference:</strong> Has-a relationship with other domains:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as createdBy}</li>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as updatedBy}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#id as companyId}</li>
 * </ul>
 *
 * <p><strong>Cross Reference:</strong> many-to-many reference with AppGroup:</p>
 * <ul>
 *     <li>AppGroup VS {@link com.athena.mis.application.entity.AppUser} </br>
 *      AppUser has many AppGroup in {@link com.athena.mis.application.entity.AppUserEntity#entityId} </br>
 *      AppGroup has many AppUser in {@link com.athena.mis.application.entity.AppUserEntity#appUserId} </br>
 *     </li>
 * </ul>
 *
 */
class AppGroup {

    public static final String DEFAULT_SORT_FIELD = "name"
    // Delete query for deleting test data of AppGroup domain
    public static final String DELETE_TEST_DATA_QUERY = """ DELETE FROM app_group WHERE id < 0 and company_id = :companyId """

    long id              // primary key (Auto generated by its own sequence)
    long version         // entity version in the persistence layer
    String name          // Unique name within a company
    long createdBy       // AppUser.id
    Date createdOn       // Object creation DateTime
    long updatedBy       // AppUser.id
    Date updatedOn       // Object updated DateTime
    long companyId       // Company.id

    static mapping = {
        id generator: 'sequence', params: [sequence: 'app_group_id_seq']
        createdBy index: 'app_group_created_by_idx'
        updatedBy index: 'app_group_updated_by_idx'
        companyId index: 'app_group_company_id_idx'

        // unique index on "name" using AppGroupService.createDefaultSchema()
        // <domain_name><property_name_1>idx
    }

    static constraints = {
        name(nullable: false)
        createdBy(nullable: false)
        createdOn(nullable: false)
        updatedBy(nullable: false)
        updatedOn(nullable: true)
        companyId(nullable: false)
    }
}
