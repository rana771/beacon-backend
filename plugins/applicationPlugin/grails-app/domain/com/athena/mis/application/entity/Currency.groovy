package com.athena.mis.application.entity

/**
 * <p>
 * <strong>Module:</strong> Application </br>
 * <strong>Purpose:</strong> Contains currency data of a Company.
 * Currency has association with few other domains as listed below.
 * </p>
 *
 * <p><strong>Foreign Reference:</strong> Other domain, which has foreign key reference of Currency:</p>
 * <ul>
 *     <li>{@link AppCountry#currencyId}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#currencyId (redundent)}</li>
 *     <li>{@link com.athena.mis.arms.entity.RmsTask#localCurrencyId}</li>
 *     <li>{@link com.athena.mis.arms.entity.RmsTask#currencyId}</li>
 *     <li>{@link com.athena.mis.exchangehouse.entity.ExhAgent#currencyId}</li>
 *     <li>{@link com.athena.mis.exchangehouse.entity.ExhAgentCurrencyPosting#currencyId}</li>
 *     <li>{@link com.athena.mis.exchangehouse.entity.ExhCurrencyConversion#fromCurrency}</li>
 *     <li>{@link com.athena.mis.exchangehouse.entity.ExhCurrencyConversion#toCurrency}</li>
 *     <li>{@link com.athena.mis.exchangehouse.entity.ExhTask#toCurrencyId}</li>
 *     <li>{@link com.athena.mis.exchangehouse.entity.ExhTask#fromCurrencyId}</li>
 *     <li>{@link com.athena.mis.exchangehouse.entity.ExhTaskTrace#toCurrencyId}</li>
 *     <li>{@link com.athena.mis.exchangehouse.entity.ExhTaskTrace#fromCurrencyId}</li>
 *     <li>{@link com.athena.mis.sarb.entity.SarbCurrencyConversion#foreignCurrencyId}</li>
 * </ul>
 *
 * <p><strong>Local Reference:</strong> Has-a relationship with other domains:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as createdBy}</li>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as updatedBy}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#id as companyId}</li>
 * </ul>
 *
 */
class Currency {

    public static final String DEFAULT_SORT_FIELD = "name"

    int id                  // primary key (Auto generated by its own sequence)
    long version            // entity version in the persistence layer
    String name             // Unique name within a company
    String symbol           // Unique symbol within a company
    String otherCode        // other code of Currency
    long companyId          // Company.id
    long createdBy          // AppUser.id
    Date createdOn          // Object creation DateTime
    long updatedBy          // AppUser.id
    Date updatedOn          // Object Updated DateTime

    static mapping = {
        id generator: 'sequence', params: [sequence: 'currency_id_seq']
        companyId index: 'currency_company_id_idx'
        createdBy index: 'currency_created_by_idx'
        updatedBy index: 'currency_updated_by_idx'

        // unique index on "name" and "symbol" using CurrencyService.createDefaultSchema()
        // <domain_name><property_name_1><property_name_2>idx
    }

    static constraints = {
        name(nullable: false);
        otherCode(nullable: true)
        companyId(nullable: false)
        createdBy(nullable: false)
        createdOn(nullable: false)
        updatedBy(nullable: false)
        updatedOn(nullable: true)
        symbol(nullable: false)   // size: 3..3
    }

    public String toString() {
        return symbol
    }
}


