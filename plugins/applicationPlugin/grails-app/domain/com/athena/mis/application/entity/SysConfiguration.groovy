package com.athena.mis.application.entity

/**
 * <p>
 * <strong>Module:</strong> Application </br>
 * <strong>Purpose:</strong> SysConfiguration objects are used to configure application.
 * SysConfiguration has association with few other domains as listed below.
 * </p>
 *
 * <p><strong>Local Reference:</strong> Has-a relationship with other domains:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as updatedBy}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#id as companyId}</li>
 * </ul>
 *
 */
class SysConfiguration {

    public static final String DEFAULT_SORT_FIELD = "key"

    long id                 // primary key (Auto generated by its own sequence)
    long version            // entity version for the persistence layer
    String key              // Unique key within a company
    String value            // value of SysConfiguration
    String description      // Description of SysConfiguration
    String transactionCode  // uses of action service
    String message          // message for SysConfig
    int pluginId            // pluginId (e.g. 1 for Application, 3 for Budget etc.)
    long companyId          // Company.id
    long updatedBy          // AppUser.id
    Date updatedOn          // Object updated DateTime

    static mapping = {
        id generator: 'sequence', params: [sequence: 'sys_configuration_id_seq']
        companyId index: 'sys_configuration_company_id_idx'
        updatedBy index: 'sys_configuration_updated_by_idx'

        // unique index on "key" using SysConfigurationService.createDefaultSchema()
        // <domain_name><property_name_1>idx
    }

    static constraints = {
        key(nullable: false)
        value(nullable: false, maxSize: 800)
        description(nullable: false, maxSize: 1000)        //@todo: maxSize is not working for this domain
        transactionCode(nullable: false, maxSize: 5000)
        pluginId(nullable: false)
        companyId(nullable: false)
        updatedOn(nullable: true)
        message(nullable: true, maxSize: 255)
    }

    public String getMessage() {
        return message && message.length() > 255 ? message.substring(0, 254) : message
    }
}
