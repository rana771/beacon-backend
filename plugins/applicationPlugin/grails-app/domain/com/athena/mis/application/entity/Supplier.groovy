package com.athena.mis.application.entity

/**
 * <p>
 * <strong>Module:</strong> Application </br>
 * <strong>Purpose:</strong> PO is issued for Supplier, Supplier is used as a source in AccVoucher.
 * Supplier has association with few other domains as listed below.
 * </p>
 *
 * <p><strong>Foreign Reference:</strong> Other domain, which has foreign key reference of Supplier:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.SupplierItem#supplierId}</li>
 *     <li>{@link com.athena.mis.accounting.entity.AccVoucherDetails#sourceId}</li>
 *     <li>{@link com.athena.mis.accounting.entity.AccCancelledVoucherDetails#sourceId}</li>
 *     <li>{@link com.athena.mis.fixedasset.entity.FxdFixedAssetDetails#supplierId}</li>
 *     <li>{@link com.athena.mis.inventory.entity.InvInventoryTransaction#transactionEntityId}</li>
 *     <li>{@link com.athena.mis.procurement.entity.ProcPurchaseOrder#supplierId}</li>
 *     <li>{@link com.athena.mis.procurement.entity.ProcCancelledPO#supplierId}</li>
 *     <li>{@link com.athena.mis.procurement.model.ProcPOForStoreInModel#supplierId}</li>
 * </ul>
 *
 * <p><strong>Local Reference:</strong> Has-a relationship with other domains:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as createdBy}</li>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as updatedBy}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#id as companyId}</li>
 *     <li>{@link com.athena.mis.application.entity.SystemEntity#id as supplierTypeId}</li>
 * </ul>
 *
 */
class Supplier {

    public static final String DEFAULT_SORT_FIELD = "name"
    // Delete query for deleting test data of supplier domain
    public static final String DELETE_TEST_DATA_QUERY = """ DELETE FROM supplier WHERE id < 0 and company_id = :companyId """

    long id                 // primary key (Auto generated by its own sequence)
    long version             // entity version in the persistence layer
    String name             // Unique name within a company
    String address          // Supplier Address
    String accountName      // Supplier Bank Account Name
    String bankName         // Supplier Bank Name
    String bankAccount      // Supplier Bank Account Number
    int itemCount           // no of item for this supplier
    long supplierTypeId     // SystemEntity.id (e.g. Material Provider, Service Provider etc)
    long companyId          // Company.id
    long createdBy          // AppUser.id
    Date createdOn          // Object creation DateTime
    long updatedBy          // AppUser.id
    Date updatedOn          // Object Updated DateTime

    static mapping = {
        id generator: 'sequence', params: [sequence: 'supplier_id_seq']
        companyId index: 'supplier_company_id_idx'
        supplierTypeId index: 'supplier_supplier_type_id_idx'
        createdBy index: 'supplier_created_by_idx'
        updatedBy index: 'supplier_updated_by_idx'

        // unique index on "name" using SupplierService.createDefaultSchema()
        // <domain_name><property_name_1>idx
    }

    static constraints = {
        name(blank: false, nullable: false)
        bankAccount(nullable: true)
        accountName(nullable: false)
        bankName(nullable: true)
        address(nullable: true)
        supplierTypeId(nullable: false)
        companyId(nullable: false)
        createdBy(nullable: false)
        createdOn(nullable: false)
        updatedBy(nullable: false)
        updatedOn(nullable: true)
    }

    public String getAddress() {
        return address && address.length() > 255 ? address.substring(0, 254) : address
    }
}
