package com.athena.mis.application.entity

/**
 * <p>
 * <strong>Module:</strong> Application </br>
 * <strong>Purpose:</strong> One or more BankBranch exists under a certain Bank.
 * Bank has association with few other domains as listed below.
 * </p>
 *
 * <p><strong>Foreign Reference:</strong> Other domain, which has foreign key reference of Bank:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.AppUserEntity#entityId}</li>
 *     <li>{@link com.athena.mis.arms.entity.RmsPurchaseInstrumentMapping#bankBranchId}</li>
 *     <li>{@link com.athena.mis.arms.entity.RmsTask#mappingBranchId}</li>
 *     <li>{@link com.athena.mis.exchangehouse.entity.ExhTask#outletBranchId}</li>
 * </ul>
 *
 * <p><strong>Local Reference:</strong> Has-a relationship with other domains:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as createdBy}</li>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as updatedBy}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#id as companyId}</li>
 *     <li>{@link AppCountry#id as countryId}</li>
 * </ul>
 *
 */
class AppBankBranch implements Serializable {

    public static final String DEFAULT_SORT_FIELD = "name"

    long id                     // primary key (Auto generated by its own sequence)
    long version                 // entity version in the persistence layer
    String code                 // Unique code within a company
    String name                 // Unique name within a company
    String address              // address of BanBranch
    Long bankId                 // Bank.id
    Long districtId             // District.id
    boolean isSmeServiceCenter  // flag for service center
    boolean isPrincipleBranch   // flag for principle branch
    long companyId              // Company.id
    boolean isGlobal            // flag for global BankBranch (for ARMS plugin)
    long createdBy              // AppUser.id
    Date createdOn              // Object creation DateTime
    long updatedBy              // AppUser.id
    Date updatedOn              // Object Updated DateTime
    String routingNo            

    static mapping = {
        id generator: 'sequence', params: [sequence: 'app_bank_branch_id_seq']

        // indexing
        bankId index: 'app_bank_branch_bank_id_idx'
        districtId index: 'app_bank_branch_district_id_idx'
        createdBy index: 'app_bank_branch_created_by_idx'
        updatedBy index: 'app_bank_branch_updated_by_idx'
        companyId index: 'app_bank_branch_company_id_idx'

        // unique index on "name", "bank_id" and "district_id" using BankBranchService.createDefaultSchema()
        // unique index on "code", "bank_id" and "district_id" using BankBranchService.createDefaultSchema()
        // <domain_name><property_name_1><property_name_2><property_name_3>idx
    }

    static constraints = {
        name(blank: false, nullable: false)
        code(blank: false, nullable: true)
        bankId(nullable: false)
        districtId(nullable: false)
        address(nullable: true, maxSize: 255)
        companyId(nullable: false)
        isGlobal(nullable: true)
        createdBy(nullable: false)
        createdOn(nullable: false)
        updatedBy(nullable: false)
        updatedOn(nullable: true)
        routingNo(nullable: true)
    }

    public String toString() {
        return name
    }

    public String getAddress(){
        return address && address.length() > 255 ? address.substring(0, 254) : address
    }
}
