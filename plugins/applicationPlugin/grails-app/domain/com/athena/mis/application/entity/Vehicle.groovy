package com.athena.mis.application.entity

/**
 * <p>
 * <strong>Module:</strong> Application </br>
 * <strong>Purpose:</strong> Used in InvInventoryTransactionDetails.
 * Vehicle has association with few other domains as listed below.
 * </p>
 *
 * <p><strong>Foreign Reference:</strong> Other domain, which has foreign key reference of Vehicle:</p>
 * <ul>
 *     <li>{@link com.athena.mis.inventory.entity.InvInventoryTransactionDetails#vehicleId}</li>
 * </ul>
 *
 * <p><strong>Local Reference:</strong> Has-a relationship with other domains:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as createdBy}</li>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as updatedBy}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#id as companyId}</li>
 * </ul>
 *
 */
class Vehicle {

    public static final String DEFAULT_SORT_FIELD = "name"
    // Delete query for deleting test data of vehicle domain
    public static final String DELETE_TEST_DATA_QUERY = """ DELETE FROM vehicle WHERE id < 0 and company_id = :companyId """

    long id                 // primary key (Auto generated by its own sequence)
    long version            // entity version in the persistence layer
    String name             // Unique name within a company
    String description      // Vehicle description
    long companyId          // Company.id
    long createdBy          // AppUser.id
    Date createdOn          // Object creation DateTime
    long updatedBy          // AppUser.id
    Date updatedOn          // Object Updated DateTime

    static mapping = {
        id generator: 'sequence', params: [sequence: 'vehicle_id_seq']
        companyId index: 'vehicle_company_id_idx'
        createdBy index: 'vehicle_created_by_idx'
        updatedBy index: 'vehicle_updated_by_idx'

        // unique index on "name" using VehicleService.createDefaultSchema()
        // <domain_name><property_name_1>idx
    }

    static constraints = {
        name(blank: false, nullable: false)
        description(blank: false, nullable: true)
        companyId(nullable: false)
        createdBy(nullable: false)
        createdOn(nullable: false)
        updatedBy(nullable: false)
        updatedOn(nullable: true)
    }

    public String getDescription() {
        return description && description.length() > 255 ? description.substring(0, 254) : description
    }
}