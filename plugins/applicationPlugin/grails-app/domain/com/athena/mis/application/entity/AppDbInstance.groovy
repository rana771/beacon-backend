package com.athena.mis.application.entity
/**
 * <p>
 * <strong>Module:</strong> Application </br>
 * <strong>Purpose:</strong> Create Database Instance for specific DB and execute query with that AppDbInstance.
 * AppDbInstance has association with few other domains as listed below.
 * </p>
 *
 * <p><strong>Foreign Reference:</strong> Other domain, which has foreign key reference of AppDbInstance:</p>
 * <ul>
 *     <li>{@link com.athena.mis.document.entity.DplOfflineDataFeed#dbInstanceId}</li>
 *     <li>{@link com.athena.mis.document.entity.DplDataExport#sourceDbInstanceId}</li>
 *     <li>{@link com.athena.mis.document.entity.DplDataExport#targetDbInstanceId}</li>
 *     <li>{@link com.athena.mis.document.entity.DplDataImport#dbInstanceId}</li>
 *     <li>{@link com.athena.mis.document.entity.DocDataIndex#dbInstanceId}</li>
 * </ul>
 *
 * <p><strong>Local Reference:</strong> Has-a relationship with other domains:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.SystemEntity#id as vendorId}</li>
 *     <li>{@link com.athena.mis.application.entity.SystemEntity#id as typeId}</li>
 *     <li>{@link com.athena.mis.application.entity.ReservedSystemEntity#id as reservedVendorId}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#id as companyId}</li>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as createdBy}</li>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as updatedBy}</li>
 * </ul>
 *
 */
class AppDbInstance {

    public static final String DEFAULT_SORT_FIELD = "name"

    long id                   // Primary Key (Auto Generated By it's own sequence)
    long version              // Entity version in the persistence layer
    String name               // Unique name of the DB Instance within company
    String generatedName      // AppDbInstance.name + (Master) or (Slave)
    long vendorId             // Vendor.id
    long typeId               // SystemEntity.id (Source Instance or Target Instance)
    long reservedVendorId     // ReservedSystemEntity.id
    String driver             // Driver of DB
    long companyId            // Company.id
    Date createdOn            // Object Created Datetime
    long createdBy            // AppUser.id
    Date updatedOn            // Object Updated datetime
    long updatedBy            // AppUser.id
    boolean isNative          // Access to native database through jdbc
    String url                // url of DB
    String dbName             // database name
    String dbVersion          // current database version
    String userName           // user name
    String password           // password
    String port               // port of DB
    String connectionString   // complete connection string ie (url:port/dbName?user=userName&password=password)
    boolean isTested          // true if connection test is successful; otherwise false
    boolean isSlave           // true for slave DB; otherwise false
    boolean isReadOnly        // if true then only read operation is executable; if false then all read/write operation is executable
    boolean isDeletable       // if false then delete operation is not executable
    String schemaName         // schema name of DB

    static mapping = {
        id generator: 'sequence', params: [sequence: 'app_db_instance_id_seq']
        vendorId index: 'app_db_instance_vendor_id_idx'
        typeId index: 'app_db_instance_type_id_idx'
        companyId index: 'app_db_instance_company_id_idx'
        createdBy index: 'app_db_instance_created_by_idx'
        updatedBy index: 'app_db_instance_updated_by_idx'

        // unique index on "db_name" and "type_id using AppDbInstanceService.createDefaultSchema()
        // unique index on "url", "port", "dbName", "userName", "password" and "companyId" using AppDbInstanceService.createDefaultSchema()
        // <domain_name><property_name_1>idx
    }

    static constraints = {
        name(nullable: false)
        updatedOn(nullable: true)
        generatedName(nullable: true)
        connectionString(nullable: false)
        url(nullable: false)
        dbName(nullable: false)
        dbVersion(nullable: true)
        userName(nullable: false)
        password(nullable: false, blank: true)
        port(nullable: false)
        schemaName(nullable: true)
    }
}
