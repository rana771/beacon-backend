package com.athena.mis.application.entity

/**
 * <p>
 * <strong>Module:</strong> Application </br>
 * <strong>Purpose:</strong> AppSms object (template) is used to send SMS.
 * AppSms has association with few other domains as listed below.
 * </p>
 *
 * <p><strong>Local Reference:</strong> Has-a relationship with other domains:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as updatedBy}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#id as companyId}</li>
 * </ul>
 *
 */
class AppSms {

    public static final String DEFAULT_SORT_FIELD = "id"
    // Delete query for deleting test data of sms domain
    public static final String DELETE_TEST_DATA_QUERY = """ DELETE FROM app_sms WHERE id < 0 and company_id = :companyId """

    long id                     // primary key (Auto generated by its own sequence)
    long version                 // entity version in the persistence layer
    String body                 // content of SMS. content may contain one or more variables to evaluate
    String description          // description of SMS
    String transactionCode      // feature code
    long companyId              // Company.id
    boolean isActive            // only activated SMS will be sent by system
    String recipients           // comma separated string of phone numbers e.g. 8801671010101, 0171010101
    boolean isRequiredRecipients// flag to determine recipients required or not
    boolean isManualSend        // can be send manually = true, otherwise = false
    int pluginId                // plugin id (Application=1, Accounting=2 etc.)
    String controllerName       // controller name e.g. accReport
    String actionName           // action(closure) e.g. sendSms
    long updatedBy              // AppUser.id
    Date updatedOn              // Object updated DateTime
    String roleId               // role id
    boolean hasSend             // true = sms has been sent, otherwise false

    static constraints = {
        body(nullable: false, maxSize: 2040)
        transactionCode(nullable: false)
        companyId(nullable: false)
        description(nullable: true)
        isActive(nullable: false)
        pluginId(nullable: false)
        isManualSend(nullable: false)
        recipients(nullable: true)
        controllerName(nullable: true)
        actionName(nullable: true)
        updatedOn(nullable: true)
        roleId(nullable: true)
        isRequiredRecipients(nullable: false)
    }

    static mapping = {
        id generator: 'sequence', params: [sequence: 'app_sms_id_seq']
        // indexing
        companyId index: 'app_sms_company_id_idx'
        updatedBy index: 'app_sms_updated_by_idx'
    }

    public String getBody() {
        return body.length() > 2040 ? body.substring(0, 2039) : body
    }
}
