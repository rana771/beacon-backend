package com.athena.mis.application.entity

/**
 * <p>
 * <strong>Module:</strong> Application </br>
 * <strong>Purpose:</strong> Contains content (file, image) of different entity (AppUser, Project etc).
 * AppAttachment has association with few other domains as listed below.
 * </p>
 *
 * <p><strong>Local Reference:</strong> Has-a relationship with other domains:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as createdBy}</li>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as updatedBy}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#id as companyId}</li>
 *     <li>{@link com.athena.mis.application.entity.ContentCategory#id as contentCategoryId}</li>
 *     <li>{@link com.athena.mis.application.entity.SystemEntity#id as contentTypeId}</li>
 *     <li>{@link com.athena.mis.application.entity.SystemEntity#id as entityTypeId}</li>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as entityId}</li>
 *     <li>{@link com.athena.mis.application.entity.Project#id as entityId}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#id as entityId}</li>
 *     <li>{@link com.athena.mis.budget.entity.BudgBudget#id as entityId}</li>
 *     <li>{@link com.athena.mis.budget.entity.BudgSprint#id as entityId}</li>
 *     <li>{@link com.athena.mis.accounting.entity.AccFinancialYear#id as entityId}</li>
 *     <li>{@link com.athena.mis.exchangehouse.entity.ExhCustomer#id as entityId}</li>
 * </ul>
 *
 */
class AppAttachment {

    public static final String DELETE_TEST_DATA_QUERY = """ DELETE FROM app_attachment WHERE id < 0 and company_id = :companyId """

    long id                    // primary key (Auto generated by its own sequence)
    long version                // entity version in the persistence layer
    long contentCategoryId     // ContentCategory.Id (Signature, Drawing, Logo, Archived file)
    long contentTypeId         // SystemEntity.id (Document, Image)
    long entityTypeId          // SystemEntity.id (Project, customers, suppliers, appUsers)
    long entityId              // Project.id, AppUser.id etc
    byte[] content             // content
    String caption             // caption of the content
    String extension           // Extension of the content(e.g : doc, txt, exl, png, jpeg, gif etc)
    String fileName            // file name of the content
    long createdBy             // AppUser.id
    Date createdOn             // Object creation DateTime
    long updatedBy             // AppUser.id
    Date updatedOn             // Object updated DateTime
    long companyId             // Company.id
    Date expirationDate        // expire date of content
    boolean isDraft            // true if created by async upload

    static constraints = {
        contentCategoryId(nullable: false)
        contentTypeId(nullable: false)
        entityTypeId(nullable: false)
        entityId(nullable: false)
        content(nullable: false)
        caption(nullable: true)
        extension(nullable: false)
        fileName(nullable: true)
        createdBy(nullable: false)
        createdOn(nullable: false)
        updatedBy(nullable: false)
        updatedOn(nullable: true)
        companyId(nullable: false)
        expirationDate(nullable: true)
        isDraft(nullable: false)
    }

    static mapping = {
        id generator: 'sequence', params: [sequence: 'app_attachment_id_seq']
        expirationDate type: 'date'

        contentCategoryId index: 'app_attachment_content_category_id_idx'
        contentTypeId index: 'app_attachment_content_type_id_idx'
        entityTypeId index: 'app_attachment_entity_type_id_idx'
        entityId index: 'app_attachment_entity_id_idx'
        createdBy index: 'app_attachment_created_by_idx'
        updatedBy index: 'app_attachment_updated_by_idx'
        companyId index: 'app_attachment_company_id_idx'
    }

    public String getCaption() {
        return caption && caption.length() > 255 ? caption.substring(0, 254) : caption
    }
}

