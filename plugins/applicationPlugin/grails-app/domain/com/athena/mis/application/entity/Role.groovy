package com.athena.mis.application.entity

/**
 * <p>
 * <strong>Module:</strong> Application </br>
 * <strong>Purpose:</strong> Determines the role and access control of features of AppUser.
 * Role has association with few other domains as listed below.
 * </p>
 *
 * <p><strong>Local Reference:</strong> Has-a relationship with other domains:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as createdBy}</li>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as updatedBy}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#id as companyId}</li>
 *     <li>{@link ReservedRole#id as roleTypeId}</li>
 * </ul>
 *
 * <p><strong>Cross Reference:</strong> many-to-many reference with Role:</p>
 * <ul>
 *     <li>Role VS {@link com.athena.mis.application.entity.AppUser} </br>
 *      AppUser has many Role in {@link com.athena.mis.application.entity.UserRole#roleId} </br>
 *      Role has many AppUser in {@link com.athena.mis.application.entity.UserRole#userId} </br>
 *     </li>
 * </ul>
 *
 */
class Role {

    public static final String DEFAULT_SORT_FIELD = "name"

    long id                         // primary key (Auto generated by its own sequence)
    int version                     // entity version in the persistence layer
    String authority                // Role authority (ROLE_Role.id_Company.id) e.g ROLE_-1_1, ROLE_5_101
    String name                     // Unique name within a company
    long companyId                  // Company.id
    long roleTypeId                 // ReservedRole.id (For any custom created role, RoleTypeId = 0)
    long createdBy                  // AppUser.id
    Date createdOn                  // Object creation DateTime
    long updatedBy                  // AppUser.id
    Date updatedOn                  // Object Updated DateTime
    long pluginId                   // Application = 1, Accounting = 2 etc. (For any custom created role, pluginId = 0)
    boolean isReseller              // true only for reseller role, otherwise false

    static mapping = {
        cache true
        id generator: 'sequence', params: [sequence: 'role_id_seq']
        companyId index: 'role_company_id_idx'
        roleTypeId index: 'role_role_type_id_idx'
        createdBy index: 'role_created_by_idx'
        updatedBy index: 'role_updated_by_idx'

        // unique index on "name" and "authority" using RoleService.createDefaultSchema()
        // <domain_name><property_name_1><property_name_2>idx
    }

    static constraints = {
        authority(blank: false)
        companyId(nullable: false)
        roleTypeId(nullable: false)
        createdBy(nullable: false)
        createdOn(nullable: false)
        updatedOn(nullable: true)
        updatedBy(nullable: false)
    }

    public String toString() {
        return this.authority
    }
}
