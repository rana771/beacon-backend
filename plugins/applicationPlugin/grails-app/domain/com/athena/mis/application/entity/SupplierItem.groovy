package com.athena.mis.application.entity

/**
 * <p>
 * <strong>Module:</strong> Application </br>
 * <strong>Purpose:</strong> Determines the Item of Supplier.
 * SupplierItem has association with few other domains as listed below.
 * </p>
 *
 * <p><strong>Local Reference:</strong> Has-a relationship with other domains:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as createdBy}</li>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as updatedBy}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#id as companyId}</li>
 *     <li>{@link com.athena.mis.application.entity.Supplier#id as supplierId}</li>
 *     <li>{@link com.athena.mis.application.entity.Item#id as itemId}</li>
 * </ul>
 *
 */
class SupplierItem {

    public static final String DEFAULT_SORT_FIELD = "id"
    // Delete query for deleting test data of supplierItem domain
    public static final String DELETE_TEST_DATA_QUERY = """ DELETE FROM supplier_item WHERE id < 0  and company_id = :companyId """

    long id              // primary key (Auto generated by its own sequence)
    long version          // entity version in the persistence layer
    long supplierId      // Supplier.id (Parent)
    long itemId          // Item.id
    long companyId       // Company.id
    long createdBy       // AppUser.id
    Date createdOn       // Object creation DateTime
    long updatedBy       // AppUser.id
    Date updatedOn       // Object Updated DateTime

    static mapping = {
        id generator: 'sequence', params: [sequence: 'supplier_item_id_seq']
        supplierId index: 'supplier_item_supplier_id_idx'
        itemId index: 'supplier_item_item_id_idx'
        createdBy index: 'supplier_item_created_by_idx'
        updatedBy index: 'supplier_item_updated_by_idx'

        // unique index on "supplier_id" and "item_id" using SupplierItemService.createDefaultSchema()
        // <domain_name><property_name_1><property_name_2>idx
    }

    static constraints = {
        itemId(nullable: false)
        supplierId(nullable: false)
        companyId(nullable: false)
        createdBy(nullable: false)
        createdOn(nullable: false)
        updatedBy(nullable: false)
        updatedOn(nullable: true)
    }
}