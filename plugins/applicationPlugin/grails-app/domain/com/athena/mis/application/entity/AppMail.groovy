package com.athena.mis.application.entity

import groovy.text.SimpleTemplateEngine

/**
 * <p>
 * <strong>Module:</strong> Application </br>
 * <strong>Purpose:</strong> AppMail object (template) is used to send mail.
 * AppMail has association with few other domains as listed below.
 * </p>
 *
 * <p><strong>Local Reference:</strong> Has-a relationship with other domains:</p>
 * <ul>
 *     <li>{@link com.athena.mis.application.entity.AppUser#id as updatedBy}</li>
 *     <li>{@link com.athena.mis.application.entity.Company#id as companyId}</li>
 * </ul>
 *
 */
class AppMail {

    // Delete query for deleting test data of AppMail domain
    public static final String DELETE_TEST_DATA_QUERY = """ DELETE FROM app_mail WHERE id < 0 and company_id = :companyId """

    long id                         // primary key (Auto generated by its own sequence)
    long version                    // entity version in the persistence layer
    String roleIds                  // List of Role Ids
    String recipients               // recipients email ids
    String subject                  // subject of mail
    String body                     // body of mail
    String mimeType                 // mime type of mail
    String transactionCode          // feature code (name of action service)
    long companyId                  // Company.id
    boolean isActive                // isActive flag (only active mail will be sent by system)
    boolean isRequiredRoleIds       // flag to determine role ids required or not
    boolean isRequiredRecipients    // flag to determine recipients required or not
    boolean isManualSend            // flag for manual send (can be send manually = true, otherwise = false)
    String controllerName           // controller name of corresponding use case (applicable for isManualSend = true)
    String actionName
    // action(closure) name of corresponding use case (applicable for isManualSend = true)
    int pluginId                    // plugin id
    long createdBy                  // AppUser.id
    Date createdOn                  // Object creation date
    long updatedBy                  // AppUser.id
    Date updatedOn                  // Object updated DateTime
    String recipientsCc             // recipients cc
    String displayName              // sender's name
    boolean hasSend                 // true = mail has been sent, otherwise false
    boolean isAnnouncement          // true if created from announcement
    String emailFrom                // creator login id

    static constraints = {
        roleIds(nullable: true)
        recipients(nullable: true)
        emailFrom(nullable: true)
        subject(nullable: false)
        body(nullable: false, maxSize: 2040)
        mimeType(nullable: true)
        transactionCode(nullable: false)
        companyId(nullable: false)
        pluginId(nullable: false)
        controllerName(nullable: true)
        actionName(nullable: true)
        isRequiredRoleIds(nullable: false)
        isRequiredRecipients(nullable: false)
        updatedOn(nullable: true)
        recipientsCc(nullable: true)
        displayName(nullable: true)
    }

    static mapping = {
        id generator: 'sequence', params: [sequence: 'app_mail_id_seq']
        companyId index: 'app_mail_company_id_idx'
        updatedBy index: 'app_mail_updated_by_idx'
    }

    // evaluate mail body
    public void evaluateMailBody(Map params) {
        SimpleTemplateEngine engine = new SimpleTemplateEngine()
        Writable template = engine.createTemplate(this.body).make(params)
        this.body = template.toString()
    }
    // evaluate mail subject
    public void evaluateMailSubject(Map params) {
        SimpleTemplateEngine engine = new SimpleTemplateEngine()
        Writable template = engine.createTemplate(this.subject).make(params)
        this.subject = template.toString()
    }

    public String getBody() {
        return body.length() > 2040 ? body.substring(0, 2039) : body
    }
}